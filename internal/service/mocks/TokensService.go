// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Kenplix/url-shrtnr/internal/entity"
	mock "github.com/stretchr/testify/mock"

	token "github.com/Kenplix/url-shrtnr/pkg/token"
)

// TokensService is an autogenerated mock type for the TokensService type
type TokensService struct {
	mock.Mock
}

// CreateTokens provides a mock function with given fields: ctx, userID
func (_m *TokensService) CreateTokens(ctx context.Context, userID string) (entity.Tokens, error) {
	ret := _m.Called(ctx, userID)

	var r0 entity.Tokens
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Tokens); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.Tokens)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseAccessToken provides a mock function with given fields: _a0
func (_m *TokensService) ParseAccessToken(_a0 string) (*token.JWTCustomClaims, error) {
	ret := _m.Called(_a0)

	var r0 *token.JWTCustomClaims
	if rf, ok := ret.Get(0).(func(string) *token.JWTCustomClaims); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.JWTCustomClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseRefreshToken provides a mock function with given fields: _a0
func (_m *TokensService) ParseRefreshToken(_a0 string) (*token.JWTCustomClaims, error) {
	ret := _m.Called(_a0)

	var r0 *token.JWTCustomClaims
	if rf, ok := ret.Get(0).(func(string) *token.JWTCustomClaims); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.JWTCustomClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAccessToken provides a mock function with given fields: ctx, claims
func (_m *TokensService) ValidateAccessToken(ctx context.Context, claims *token.JWTCustomClaims) error {
	ret := _m.Called(ctx, claims)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *token.JWTCustomClaims) error); ok {
		r0 = rf(ctx, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRefreshToken provides a mock function with given fields: ctx, claims
func (_m *TokensService) ValidateRefreshToken(ctx context.Context, claims *token.JWTCustomClaims) error {
	ret := _m.Called(ctx, claims)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *token.JWTCustomClaims) error); ok {
		r0 = rf(ctx, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTokensService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokensService creates a new instance of TokensService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokensService(t mockConstructorTestingTNewTokensService) *TokensService {
	mock := &TokensService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
