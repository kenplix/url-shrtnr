// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/kenplix/url-shrtnr/internal/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *UsersService) GetByID(ctx context.Context, userID primitive.ObjectID) (entity.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersService(t mockConstructorTestingTNewUsersService) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
