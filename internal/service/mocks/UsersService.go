// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/Kenplix/url-shrtnr/pkg/auth"

	mock "github.com/stretchr/testify/mock"

	service "github.com/Kenplix/url-shrtnr/internal/service"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// RefreshTokens provides a mock function with given fields: ctx, refreshToken
func (_m *UsersService) RefreshTokens(ctx context.Context, refreshToken string) (auth.Tokens, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 auth.Tokens
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.Tokens); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(auth.Tokens)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: ctx, input
func (_m *UsersService) SignIn(ctx context.Context, input service.UserSignInInput) (auth.Tokens, error) {
	ret := _m.Called(ctx, input)

	var r0 auth.Tokens
	if rf, ok := ret.Get(0).(func(context.Context, service.UserSignInInput) auth.Tokens); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(auth.Tokens)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.UserSignInInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, input
func (_m *UsersService) SignUp(ctx context.Context, input service.UserSignUpInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.UserSignUpInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersService(t mockConstructorTestingTNewUsersService) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
